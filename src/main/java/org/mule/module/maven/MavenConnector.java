/**
 * Mule Maven Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */
package org.mule.module.maven;

import org.apache.maven.cli.MavenCli;
import org.codehaus.plexus.classworlds.ClassWorld;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.param.Optional;

import javax.annotation.PostConstruct;
import java.util.Map;

/**
 * Maven is a tool used for building and managing any Java-based project. This connector will let you execute Maven goals.
 *
 * @author MuleSoft, Inc.
 */
@Module(name = "maven")
public class MavenConnector {
    private ClassWorld classWorld;
    private MavenCli mavenCli;

    @PostConstruct
    public void init() {
        this.classWorld = new ClassWorld("plexus.core", Thread.currentThread().getContextClassLoader());
        this.mavenCli = new MavenCli(classWorld);
    }

    /**
     * Executes a Maven goal
     * <p/>
     * {@sample.xml ../../../doc/mule-module-maven.xml.sample maven:execute-goal}
     *
     * @param goal       Name of the goal to execute (eg javadoc:javadoc)
     * @param properties Environment properties
     * @param directory  Name of the directory containing your pom.xml
     */
    @Processor
    public void executeGoal(String goal, @Optional Map<String, String> properties, @Optional String directory) {
        try {
            String[] arguments = new String[properties.size() + 1];

            int i = 0;
            for (String key : properties.keySet()) {
                arguments[i] = "-D" + key + "=" + properties.get(key);
                i++;
            }

            arguments[i] = goal;


            mavenCli.doMain(arguments, directory, System.out, System.err);
        } catch (Exception e) {
            throw new RuntimeException("Unable to execute goal " + goal, e);
        }

    }
}
